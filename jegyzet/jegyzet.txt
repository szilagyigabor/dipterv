2023.03.31.
Mesh generálás példakódok: mfem/miniapps/meshing/...
- a meshnek gyakorlatilag csak az alakját kell jól leírni fileba, a megoldóprogram még finomíthatja tovább, az sincs a fileban definiálva, hogy milyen típusú elemekből áll a mesh, csak az alakjuk adott.
- az ex0.cpp példakódban le vannak írva a mesh beolvasástól a megoldásig a lépések:
    1. 


2023.04.02.
Egy parallel mesh-t úgy lehet értelmesen megjeleníteni, hogy ha mesh.000000, mesh.000001, ... alakban vannak elmentve a mesh darabok és sol.000000, ... alakban a megoldások rajtuk, akkor mesh-nek csak "mesh"-t adok meg, függvénynek meg csak "sol"-t. A -k "RAjlmm" opció plusz az F11/F12 szép szétrobbantott ábrát ad 2D-ben.

2023.04.07.
A "symplectic integration" valami olyan időlépéses technika, amiben azonos időpillanatokban értelmesek az E és B terek. Ehhez kétféle végeselemet használ a program ugyanazon a meshen (H(Div) és H(Curl) - Nedelec). A mesh generálás nagyon macerás. Használható lehet, ha Quadrilateral típusú (téglalap/téglatest) non-conformal mesh-t használok, amin lehet egész jól használni a "mesh-optimizer" miniappot úgy, hogy ha definiálok különböző anyagokat meghatározó függvényt, akkor az anyaghatárokon adaptívan sűrít.
A lényeg, hogy a mesh generálást ki kell találni. Először elég, ha valami nagyon durva hálót csinálok, aminél legalább conformal illeszkedés van a különböző részek között.
Valószínűleg használható külső program mesh generálásra: Cubit vagy GMSH

2023.04.08.
MFEM-en belül mesh felépítés: (polar-nc.cpp meshing miniapp)
 - mfem::Mesh::Mesh(int Dim_, int NVert, intNElem, intNBdrElem=0, intspaceDim_=-1) // mesh létrehozás, Dim_=2 vagy 3
 - int vertex_index = mesh->AddVertex(double x, double y); 
 - a példakód egy Array<Params2> listában tárolja el a koordinátákat meg egy 0-t
 - mesh->AddBdrSegment(csúcspont indexek, attribute) vagy AddBdr{Point,Element,stb}-vel kell megadni a határoló felületet
 - mesh->Add{Quad,Triangle,stb}(csúcsok indexei)-vel lehet a végeselemeket hozzáadni
 - mesh->FinalizeMesh(); kell a végén
 - ofstream ofs("mesh file neve"); ofs.precision(8); mesh->Print(ofs); a mesh elmentéséhez

2023.04.23.
Kész a meshelés 2D-re. 2D-ben lehet választani, hogy másodrendű ODE-t oldok meg, vagy két csatolt elsőrendűt (E-re és B-re) célszerűen.
	dE/dt = 1/(mu*epsilon) rotH
	dB/dt = -rotE
vagy
	d^2B/dt^2 = divgradB

2023.04.27.
...

2023.05.04.
Lehet ToDenseMatrix() függvénnyel sparse -> dense átalakítást csinálni. Nice. MixedScalarWeakCurlIntegrator lesz a rot(skalár E) -> vektor B rot operátor 2D-ben. Ha jól értem, az operátor iránya: trial space -> test space. A másik irány, vagyis a rot(vektor B) -> E operátornak használható a MixedScalarCurlIntegrator elvileg.
Mi az a Mass Matrix?

2023.05.10.
Vészhelyzeti üzemmód. Holnapig el kell dönteni, hogy mit lehet tenni MFEM-mel. Ma beszéltem Bilicz-cel, ezekre jutottunk:
	- az ABC előírása tápvonalban valószínűleg kb lehetetlen, még PML-lel is, mert a csőtápvonal hullámimpedanciája módusfüggő és frekvenciafüggő. Ehelyett úgy kéne csinálni, hogy hosszú tápvonal van és nem várjuk meg, amíg végigér rajta a hullám, hanem egy-egy közbülső keresztmetszeti felület a tápvonal virtuális eleje és vége
Amire én jutottam:
	- MFEM-ben működik az időfüggő gerjesztés a falról
	- nem találtam meg, hogyan kell egy adott pontban kiértékelni a teret, ami elég nevetséges

2023.05.11.
 - Megtaláltam kb, hogy hogyan kell egy adott pontban kiértékelni a teret, de elég bonyolult. Meg kell találni, hogy melyik elemben van a pont, aztán hogy annak az elemnek mi a transzformációja, ami a referencia elemet abba viszi (vagy fordítva, már nem tudom), aztán az egyik GetValue függvénnyel lehet elvileg kinyerni az értéket, ha skalár, de vektorra más kell.
 - Találtam egy FindPoints() nevű függvényt, ami elem ID-ket, inverz transzformációkat és referenciatérbeli IntegrationPoint-okat ad vissza. Ezekkel talán lehet függvényt kiértékelni adott pontban.
 - Van egy ilyen függvény a mátrixoknál, hogy AddMult(), ezzel lehet ilyet csinálni: y += A*x*alpha, ahol alpha egy opcionális skalártényező.